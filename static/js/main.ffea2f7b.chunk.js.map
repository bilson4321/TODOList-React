{"version":3,"sources":["Component/Header.js","Component/TODOItem.js","Component/ItemList.js","Component/Search.js","Component/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","TODOItem","props","changeState","setState","completed","state","deleteTask","event","preventDefault","title","item","onClick","this","type","onChange","checked","ItemList","todoTask","map","index","key","id","Search","changeSearchQuery","changeSearchKeyWord","target","value","searchQuery","placeholder","NavBar","buttonClick","text","view","handleTaskInput","e","taskInput","addTask","showForm","Fragment","htmlFor","App","keyword","searchKeyWord","changeView","toView","addNewTask","task","temp","UniqueId","tasks","find","element","result","filter","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ffea2f7b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Header extends React.Component\r\n{\r\n    render()\r\n    {\r\n        return(\r\n        <header className='bg-dark text-white mb-2'>\r\n            <div className='container p-3'>\r\n                <h1>TO-DO List</h1>\r\n            </div>\r\n        </header>\r\n        );\r\n    }\r\n}\r\nexport default Header;","import React from 'react';\r\n\r\nclass TODOItem extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state={\r\n            title:this.props.item.title,\r\n            completed:this.props.item.completed\r\n        }\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className='custom-control custom-checkbox mb-1' onClick={this.changeState}>\r\n                <input className='custom-control-input' type='checkbox' onChange={this.changeState} checked={this.state.completed}/>\r\n                <label className='custom-control-label'>{this.state.completed?<del>{this.state.title}</del>:this.state.title}</label>\r\n                <button className='float-right' onClick={this.deleteTask}>X</button>\r\n            </div>\r\n        );\r\n    }\r\n    changeState=()=>\r\n    {\r\n        this.setState({completed:!this.state.completed});\r\n    }\r\n    deleteTask=(event)=>\r\n    {\r\n        event.preventDefault();\r\n        \r\n    }\r\n}\r\nexport default TODOItem;","import React from 'react';\r\nimport TODOItem from './TODOItem.js';\r\n\r\nclass ItemList extends React.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <article>\r\n                <div className='container'>\r\n                    <ul className='list-group'>\r\n                    {this.props.todoTask.map((item,index)=>\r\n                        {\r\n                            return(<li className='list-group-item' key={item.id}>\r\n                             <TODOItem item={item} />\r\n                            </li>)\r\n                        })}\r\n                    </ul>\r\n                </div>  \r\n            </article>\r\n        );\r\n    }\r\n}\r\nexport default ItemList;","import React from 'react';\r\n\r\nclass Search extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            searchQuery:''\r\n        };\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <div className='container mb-4'>\r\n                <div className='input-group'>\r\n                    <input className='form-control' type='text' placeholder=\"Search tasks.....\" onChange={this.changeSearchQuery}></input>\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-success\" type=\"submit\">Search</button>  \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    changeSearchQuery=(event)=>\r\n    {\r\n        this.props.changeSearchKeyWord(event.target.value);\r\n        this.setState({searchQuery:event.target.value});\r\n    }\r\n}\r\nexport default Search;","import React from 'react';\r\n\r\nclass NavBar extends React.Component\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state={\r\n            showForm:false,\r\n            taskInput:\"\"\r\n        };\r\n    }\r\n    render()\r\n    {\r\n        return(\r\n            <React.Fragment>\r\n                <div className='container mb-4'>\r\n                <div className=\"btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={(e)=>this.buttonClick(\"all\")}>All</button>\r\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={(e)=>this.buttonClick(\"completed\")}>\r\n                        Completed\r\n                    </button>\r\n                    <button type=\"button\" className=\"btn btn-secondary\" onClick={(e)=>this.buttonClick(\"pending\")}>Not Completed</button>\r\n                </div>\r\n                <button type=\"button\" className=\"btn btn-primary float-right\">\r\n                    Add Task\r\n                </button>\r\n            </div>\r\n            <div className=\"container mb-2\">\r\n                <form>\r\n                <div className='input-group'>\r\n                    <label htmlFor='task'>Task : </label>\r\n                    <input id='task' className='form-control' type='text' placeholder=\"Task\" onChange={this.handleTaskInput}></input>\r\n                    <div className=\"input-group-append\">\r\n                        <button className=\"btn btn-success\" type=\"submit\" onClick={this.addTask}>Add</button>  \r\n                    </div>\r\n                </div>\r\n                </form>\r\n            </div>\r\n            </React.Fragment> \r\n        );\r\n    }\r\n    buttonClick=(text)=>\r\n    {\r\n        this.props.view(text);\r\n    }\r\n    handleTaskInput=(e)=>\r\n    {\r\n        this.setState({taskInput:e.target.value});\r\n        \r\n    }\r\n    addTask=(e)=>\r\n    {\r\n        e.preventDefault();\r\n        this.setState({taskInput:\"\"});\r\n        this.props.addTask(this.state.taskInput);\r\n    }\r\n}\r\nexport default NavBar;","import React from 'react';\n\nimport Header from './Component/Header.js'\nimport ItemList from './Component/ItemList.js';\nimport Search from './Component/Search.js';\nimport NavBar from './Component/Navbar.js';\n\nimport UniqueId from 'uniqid';\n\nclass App extends React.Component \n{\n  constructor()\n  {\n    super();\n    this.state={\n      tasks:[\n              {\n                id:UniqueId(),\n                title:\"Cook breakFast\",\n                completed:false\n              },\n              {\n                id:UniqueId(),\n                title:\"Go to College\",\n                completed:false\n              },\n              {\n                id:UniqueId(),\n                title:\"Study in College\",\n                completed:true\n              }\n            ],\n      view:\"all\",\n      searchKeyWord:\"\"\n    }\n\n  }\n  render()\n  {\n    var result='';\n    if(this.state.view===\"completed\")\n      result=this.state.tasks.filter(value=>value.completed===true);\n    else if(this.state.view===\"pending\")\n      result=this.state.tasks.filter(value=>value.completed===false);\n    else\n      result=this.state.tasks;\n\n\n    result=result.filter(value=>value.title.includes(this.state.searchKeyWord));\n    \n    // // if(this.state.searchKeyWord!==\"\")\n    // // {\n    // //   console.log(this.state.searchKeyWord);\n    // //   result=this.state.tasks.filter(value=>value.title.includes(this.state.searchKeyWord));\n    // // }\n    // else\n    // {\n    //   result=this.state.tasks;\n    // }\n    return (\n      <React.Fragment>\n        <Header />\n        <NavBar view={this.changeView} addTask={this.addNewTask}/>\n        <Search changeSearchKeyWord={this.changeSearchQuery}/>\n        <ItemList todoTask={result} />\n      </React.Fragment>\n    );\n  }\n  changeSearchQuery=(keyword)=>\n  {\n    this.setState({searchKeyWord:keyword});\n  }\n  changeView=(toView)=>\n  {\n    this.setState({view:toView});\n  }\n  addNewTask=(task)=>\n  {\n    var temp={id:UniqueId(),\n              title:task,\n             completed:false};\n    this.setState({tasks:[...this.state.tasks,temp]});\n  }\n  deleteTask=(id)=>\n  {\n    var toDelete=this.state.tasks.find(element=>element.id===id);\n    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}